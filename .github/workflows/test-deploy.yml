name: Test Deploy on Develop

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: test-deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

# ✅ Global environment variables
env:
  NODE_ENV: production
  NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
  NEXT_PUBLIC_SITE_NAME: ${{ secrets.NEXT_PUBLIC_SITE_NAME }}
  NEXT_PUBLIC_SITE_SHORTNAME: ${{ secrets.NEXT_PUBLIC_SITE_SHORTNAME }}
  NEXT_PUBLIC_DEV_NAME: ${{ secrets.NEXT_PUBLIC_DEV_NAME }}
  NEXT_PUBLIC_DEV_URL: ${{ secrets.NEXT_PUBLIC_DEV_URL }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      docker: ${{ steps.changes.outputs.docker }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - 'app/**'
              - 'pages/**'
              - 'components/**'
              - '**/*.{ts,tsx,js,jsx}'
              - '!**/*.test.{ts,tsx,js,jsx}'
              - '!**/*.spec.{ts,tsx,js,jsx}'
            docker:
              - 'Dockerfile'
              - '.dockerignore'
              - 'docker-compose.*'
            config:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - '*.config.*'
              - 'tsconfig.json'

  validate_build_artifact:
    name: 🧪 Validate Build Artifact
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
    strategy:
      matrix:
        node-version: [22.x, 23.x]
    env:
      NODE_ENV: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Type Check
        run: pnpm type-check

      - name: Lint Check
        run: pnpm lint

      - name: Run Tests (if exists)
        run: |
          if pnpm run test --help &> /dev/null; then
            pnpm test
          else
            echo "No test script found, skipping tests"
          fi

      - name: Run Production Build
        run: pnpm build

      - name: Validate Build Output
        run: |
          test -d ".next" || { echo "❌ .next directory missing"; exit 1; }
          test -f ".next/BUILD_ID" || { echo "❌ BUILD_ID missing"; exit 1; }
          echo "✅ Build ID: $(cat .next/BUILD_ID)"

      - name: Test Production Server
        run: |
          timeout 60s pnpm start &
          SERVER_PID=$!
          for i in {1..30}; do
            if curl -fs http://localhost:3000/ > /dev/null; then break; fi
            if [ $i -eq 30 ]; then echo "❌ Server failed to start"; kill $SERVER_PID; exit 1; fi
            sleep 2
          done
          curl -fs http://localhost:3000/ || { echo "❌ Server health check failed"; kill $SERVER_PID; exit 1; }
          echo "✅ Production server test passed"
          kill $SERVER_PID

      - name: Bundle Size Analysis
        run: |
          if grep -q "@next/bundle-analyzer" package.json; then
            ANALYZE=true pnpm build || echo "⚠️ Bundle analysis warnings"
          else
            echo "ℹ️ Bundle analyzer not configured, skipping"
          fi

  security_scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup pnpm for audit
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Security Audit
        run: |
          pnpm audit --audit-level moderate --json > audit-results.json || {
            cat audit-results.json | jq -r '.advisories | to_entries[] | "\(.value.title) - \(.value.severity)"'
            exit 1
          }

  validate_docker_build:
    name: 🐳 Validate Docker Image Build
    runs-on: ubuntu-latest
    needs: [changes, validate_build_artifact]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: test-image:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Test Docker Image
        run: |
          docker run -d --name test-container -p 3000:3000 \
            --health-cmd="curl -f http://localhost:3000/ || exit 1" \
            --health-interval=10s --health-timeout=5s --health-retries=3 \
            test-image:${{ github.sha }}
          for i in {1..30}; do
            status=$(docker inspect --format='{{.State.Health.Status}}' test-container)
            [ "$status" = "healthy" ] && break
            [ "$status" = "unhealthy" ] && docker logs test-container && exit 1
            sleep 2
          done
          curl -fs http://localhost:3000/ || { docker logs test-container; exit 1; }
          docker stop test-container && docker rm test-container

      - name: Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-results.sarif'

  performance_test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [validate_build_artifact]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Application
        run: pnpm build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.0

      - name: Run Lighthouse CI
        run: |
          timeout 120s pnpm start &
          SERVER_PID=$!
          for i in {1..30}; do
            curl -fs http://localhost:3000/ && break
            [ $i -eq 30 ] && kill $SERVER_PID && exit 1
            sleep 2
          done
          lhci autorun \
            --upload.target=temporary-public-storage \
            --collect.numberOfRuns=3 \
            --collect.url=http://localhost:3000 || echo "Lighthouse completed with warnings"
          kill $SERVER_PID

  summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs:
      - changes
      - validate_build_artifact
      - security_scan
      - validate_docker_build
      - performance_test
    if: always()
    steps:
      - name: Generate Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              build: '${{ needs.validate_build_artifact.result }}',
              security: '${{ needs.security_scan.result }}',
              docker: '${{ needs.validate_docker_build.result }}',
              performance: '${{ needs.performance_test.result }}'
            };

            const icons = { success: '✅', failure: '❌', cancelled: '⏹️', skipped: '⏭️', unknown: '❓' };
            const texts = { success: 'Passed', failure: 'Failed', cancelled: 'Cancelled', skipped: 'Skipped', unknown: 'Unknown' };

            const status = (r) => icons[r] || icons.unknown;
            const label = (r) => texts[r] || texts.unknown;

            const passed = Object.values(results).filter(r => r === 'success').length;
            const failed = Object.values(results).filter(r => r === 'failure').length;
            const total = Object.values(results).filter(r => r !== 'skipped').length;
            const overall = failed > 0 ? '❌ Some tests failed' : passed === total ? '✅ All tests passed' : '⚠️ Some tests skipped';

            const summary = `
            ## 🚀 Deploy Test Summary
            **Overall Status**: ${overall}
            **Results**: ${passed} passed, ${failed} failed, ${total - passed - failed} other

            ### Detailed Results:
            | Test | Status | Result |
            |------|--------|--------|
            | 🧪 Build Validation | ${status(results.build)} | ${label(results.build)} |
            | 🔒 Security Scan    | ${status(results.security)} | ${label(results.security)} |
            | 🐳 Docker Build     | ${status(results.docker)} | ${label(results.docker)} |
            | ⚡ Performance Test | ${status(results.performance)} | ${label(results.performance)} |

            ${failed > 0 ? '⚠️ **Action Required**: Please fix the failed checks before deploying.' : ''}
            `;

            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              }).catch(err => console.log('Failed to post comment:', err.message));
            }

            await core.summary.addRaw(summary).write();
            core.setOutput('overall-status', failed > 0 ? 'failure' : 'success');
